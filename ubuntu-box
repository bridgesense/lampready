#!/usr/bin/env bash
# Home: https://github.com/bridgesense/lampready
# This script creates a LAMP stack with a single ubuntu focal container.
# Customize the information below to suit your needs,
# then run: bash box
#
# Before you begin:
# Make sure to expose priviledged ports
# > sudo -i
# > echo "net.ipv4.ip_unprivileged_port_start=0" > /etc/sysctl.d/05-expose-privileged.conf
# > sysctl --system
# > sysctl net.ipv4.ip_unprivileged_port_start=0
#
# TROUBLE SHOOTING
# Error: OCI runtime error: chmod `run/shm`: Operation not supported
# see: https://noobient.com/2023/11/15/fixing-ubuntu-containers-failing-to-start-with-systemd/
# export CRUN_VER='1.11.2'
# mkdir -p "${HOME}/.local/bin"
# curl -L "https://github.com/containers/crun/releases/download/${CRUN_VER}/crun-${CRUN_VER}-linux-amd64" -o "${HOME}/.local/bin/crun"
# chmod +x "${HOME}/.local/bin/crun"
# mkdir -p "${HOME}/.config/containers"
# cat << EOF > "${HOME}/.config/containers/containers.conf"
# [engine.runtimes]
# crun = [
#   "${HOME}/.local/bin/crun",
#   "/usr/bin/crun"
# ]
# EOF
# # # # # # # # # # # # # # # # # # # # # # # # # # # #

HOSTNAME="lampready.com"
SUB_DOMAIN="dev"
PUBLIC_ROOT_PATH="public_html"

HTTP_PORT="80"
SSL_PORT="443"

TIMEZONE="America/Los_Angeles"

PHP_VERSION="7.4" # 5.6 - 8.1
PHP_MAX_EXEC_TIME="600"
PHP_MEM_LIMIT="512M"

# WARNING! Apache runs as root inside this container to handle permissions as you would
# expect.  Therefore Apache has access to everything root has. When enabling xdebug
# you will be exposing private network information to the container environment.
XDEBUG_ENABLE="0"
XDEBUG_PORT="9003"
XDEBUG_FORCE_DISPLAY_ERRORS="1"
XDEBUG_SCREAM="0"
XDEBUG_DISPLAY_MAX_DATA="2048"
XDEBUG_DISPLAY_MAX_DEPTH="3"
XDEBUG_DISPLAY_MAX_CHILDREN="128"

declare -A DB1=(
	[DB_NAME]=""
	[DB_USER]=""
	[DB_PASS]='' # make sure to use single quotes here to compensate for special chars
	[DB_PERM]="ALL"
	[DB_PREFIX]=""                    # e.g. wp_
	[DB_TYPE]="custom"                # custom, wordpress, magento_1, magento_2
	[DB_FILENAME]=""                  # my_db.sql
	[DB_CUSTOM_FUNCTIONS_FILENAME]="" # my_custom_functions.sql
)

# declare -A DB2=(...

# # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Don't edit below this point unless you really want to
# ref: https://hub.docker.com/r/jrei/systemd-ubuntu
IMAGE="docker.io/jrei/systemd-ubuntu:20.04"

SITE_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
ACTION="${1:-help}"
if [ "$SUB_DOMAIN" != "" ]; then SITE_NAME="${SUB_DOMAIN}.${HOSTNAME}"; else SITE_NAME=$HOSTNAME; fi
MULTI_BOX=0
USE_TMPFS=0
USE_EXTRAS=0

# # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # functions

# builds the container directory
function build_container_directory {
	message "Building container directory at ${SITE_HOME}/.container ..."
	if [ -d "${SITE_HOME}/.container/log" ]; then
		rm -rf "${SITE_HOME}/.container/log"
	fi
	if [ -d "${SITE_HOME}/.container/mariadb" ]; then
		rm -rf "${SITE_HOME}/.container/mariadb"
	fi
	mkdir -p "${SITE_HOME}/.container/log"
	mkdir -p "${SITE_HOME}/.container/mariadb"
	if [ ! -d "${SITE_HOME}/.container/sites-enabled" ]; then
		mkdir -p "${SITE_HOME}/.container/sites-enabled"
	fi
	if [ ! -d "${SITE_HOME}/${PUBLIC_ROOT_PATH}" ]; then
		mkdir -p "${SITE_HOME}/${PUBLIC_ROOT_PATH}"
		message "It worked!! Please do something about the missing files in ${SITE_HOME}/${PUBLIC_ROOT_PATH}" >"${SITE_HOME}/${PUBLIC_ROOT_PATH}/index.html"
	fi
}

# build default httpd conf files
function build_default_httpd_conf {
	# default http file
	_http_conf_file=/etc/apache2/sites-enabled/000-default.conf
	echo "<VirtualHost *:${HTTP_PORT}>" >$_http_conf_file
	echo "    ServerAdmin root@${HOSTNAME}" >>$_http_conf_file
	echo "    ServerName ${HOSTNAME}" >>$_http_conf_file
	echo "    ServerAlias ${SUB_DOMAIN}.${HOSTNAME}" >>$_http_conf_file
	echo "    DocumentRoot /var/www/${PUBLIC_ROOT_PATH}" >>$_http_conf_file
	echo "    DirectoryIndex index.php index.html index.htm" >>$_http_conf_file
	echo "    ErrorLog /var/log/apache2/${HOSTNAME}.error.log" >>$_http_conf_file
	echo "    CustomLog /var/log/apache2/${HOSTNAME}.access.log combined" >>$_http_conf_file
	echo "    <Directory \"/var/www\">" >>$_http_conf_file
	echo "         AllowOverride All" >>$_http_conf_file
	echo "         Require all granted" >>$_http_conf_file
	echo "    </Directory>" >>$_http_conf_file
	echo "    <Directory \"/var/www/${PUBLIC_ROOT_PATH}\">" >>$_http_conf_file
	echo "         Options Indexes FollowSymLinks" >>$_http_conf_file
	echo "         AllowOverride All" >>$_http_conf_file
	echo "         Require all granted" >>$_http_conf_file
	echo "    </Directory>" >>$_http_conf_file
	echo "</VirtualHost>" >>$_http_conf_file

	# default https file
	_https_conf_file=/etc/apache2/sites-enabled/000-default-ssl.conf
	echo "<VirtualHost _default_:${SSL_PORT}>" >$_https_conf_file
	echo "    ServerAdmin root@${HOSTNAME}" >>$_https_conf_file
	echo "    ServerName ${HOSTNAME}" >>$_https_conf_file
	echo "    ServerAlias ${SUB_DOMAIN}.${HOSTNAME}" >>$_https_conf_file
	echo "    DocumentRoot /var/www/${PUBLIC_ROOT_PATH}" >>$_https_conf_file
	echo "    DirectoryIndex index.php index.html index.htm" >>$_https_conf_file
	echo "    ErrorLog /var/log/apache2/${HOSTNAME}.ssl-error.log" >>$_https_conf_file
	echo "    CustomLog /var/log/apache2/${HOSTNAME}.ssl-access.log combined" >>$_https_conf_file
	echo "    SSLEngine on" >>$_https_conf_file
	echo "    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem" >>$_https_conf_file
	echo "    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key" >>$_https_conf_file
	echo "    <FilesMatch \"\\.(cgi|shtml|phtml|php)$\">" >>$_https_conf_file
	echo "         SSLOptions +StdEnvVars" >>$_https_conf_file
	echo "    </FilesMatch>" >>$_https_conf_file
	echo "    <Directory \"/var/www/cgi-bin\">" >>$_https_conf_file
	echo "         SSLOptions +StdEnvVars" >>$_https_conf_file
	echo "    </Directory>" >>$_https_conf_file
	echo "    <Directory \"/var/www\">" >>$_https_conf_file
	echo "         Options Indexes FollowSymLinks" >>$_https_conf_file
	echo "         AllowOverride All" >>$_https_conf_file
	echo "         Require all granted" >>$_https_conf_file
	echo "    </Directory>" >>$_https_conf_file
	echo "    <Directory \"/var/www/${PUBLIC_ROOT_PATH}\">" >>$_https_conf_file
	echo "         Options Indexes FollowSymLinks" >>$_https_conf_file
	echo "         AllowOverride All" >>$_https_conf_file
	echo "         Require all granted" >>$_https_conf_file
	echo "    </Directory>" >>$_https_conf_file
	echo "</VirtualHost>" >>$_https_conf_file
}

# builds the site image based on the information entered at
# the top of this script
function build_image {
	# clean up dangling images
	buildah rm --all
	podman rmi -f $(podman images --filter "dangling=true" -q --no-trunc) >/dev/null 2>&1

	# clean up anything that might exist in a failed state
	# or left over from a previous session
	if podman images | grep -q "$SITE_NAME"; then
		message "Cleaning up an old image ..."
		podman rm $SITE_NAME >/dev/null 2>&1
		podman rmi "${SITE_NAME}:private" >/dev/null 2>&1
	fi

	# tools
	# _tools="make crontabs cronie iputils net-tools git unzip xz elasticsearch"
	_tools="vim dialog apt-utils dumb-init git curl wget software-properties-common mutt"

	# modules
	_modules="nodejs npm python3 python3-pip ruby"

	# npm globals
	_npm_globals="npm install -g n; n stable; npm install -g npm@latest; npm install -g npm;\
        npm install --global yarn grunt-cli eslint csslint sass gulp-sass \
        typescript typescript-language-server intelephense coffeelint yaml-lint \
        eslint-plugin-toml eslint-plugin-markdown golangci-lint \
        vscode-css-languageserver-bin; \
        "

	# composer
	_composer="curl https://getcomposer.org/composer-stable.phar >> /usr/local/bin/composer; \
        chmod +x /usr/local/bin/composer; \
        echo \"alias composer='env COMPOSER_ALLOW_SUPERUSER=1 composer'\" >> /root/.bashrc; \
        "

	# apache
	_apache="apache2 openssl"

	# Apache config
	_apache_config="a2enmod ssl rewrite headers; \
        sed -i \"/^# Global configuration/a ServerName ${HOSTNAME}\" /etc/apache2/apache2.conf; \
        sed -i \"s@export APACHE_RUN_USER.*@export APACHE_RUN_USER=root@g\" /etc/apache2/envvars; \
        sed -i \"s@export APACHE_RUN_GROUP.*@export APACHE_RUN_GROUP=root@g\" /etc/apache2/envvars; \
        "

	# openssl
	_openssl="openssl req -newkey rsa:2048 -x509 -sha256 -days 999999 \
        -nodes -subj '/C=US/ST=Oregon/L=Portland/O=DevTeam/CN=${SITE_NAME}' \
        -out /etc/ssl/certs/ssl-cert-snakeoil.pem -keyout /etc/ssl/private/ssl-cert-snakeoil.key; \
        "

	# Mariadb
	_mariadb="mariadb-server \
        "

	_mariadb_config="sed -i \"s@^pid-file@#pid-file@g\" /etc/mysql/mariadb.conf.d/50-server.cnf; \
        sed -i \"s@^socket@#socket@g\" /etc/mysql/mariadb.conf.d/50-server.cnf; \
        sed -i \"/^\\[mysqld\\]/a socket=/var/lib/mysql/mysql.sock\\ntmpdir=/tmp\\nlc-messages-dir=/usr/share/mysql\\nskip-external-locking\\nquery_cache_limit=1G\\nquery_cache_size=16M\\ninnodb_file_per_table=1\\ninnodb_file_format=barracuda\\ninnodb_strict_mode=0\\nsql_mode=''\\ninnodb_large_prefix=1\\ninnodb_log_file_size=256M\\ntmp_table_size=256MB\\nmax_heap_table_size=256MB\\nslow_query_log = 1\\nslow_query_log_file = /var/log/apache2/mariadb-slow.log\\nlong_query_time = 2\\nlog_error=/var/log/apache2/mariadb.log\\nuser=root\" /etc/mysql/mariadb.conf.d/50-server.cnf; \
        sed -i \"s@^User=mysql@User=root@g\" /usr/lib/systemd/system/mariadb.service; \
        sed -i \"s@^Group=mysql@Group=root@g\" /usr/lib/systemd/system/mariadb.service; \
        sed -i \"s@/usr/sbin/mariadbd@/usr/sbin/mariadbd --user=root@g\" /usr/lib/systemd/system/mariadb.service; \
        "

	# elasticsearch
	_elasticsearch="curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | gpg --dearmor -o /usr/share/keyrings/elastic.gpg; \
        echo \"deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/7.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-7.x.list; \
        apt-get update; \
        apt-get install -y elasticsearch; \
        "

	# php
	_php="php${PHP_VERSION} php${PHP_VERSION}-bz2 php${PHP_VERSION}-curl \
          php${PHP_VERSION}-gd php${PHP_VERSION}-intl php${PHP_VERSION}-mbstring \
          php${PHP_VERSION}-mcrypt php${PHP_VERSION}-pspell php${PHP_VERSION}-xml \
          php${PHP_VERSION}-zip php${PHP_VERSION}-imap php${PHP_VERSION}-imagick \
          php${PHP_VERSION}-mysqlnd php${PHP_VERSION}-soap php${PHP_VERSION}-dev \
          php${PHP_VERSION}-memcached php${PHP_VERSION}-xdebug php${PHP_VERSION}-bcmath\
          memcached \
          "

	# php config
	_php_config="sed -i \"s@short_open_tag.*@short_open_tag=On@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@max_execution_time.*@max_execution_time=${PHP_MAX_EXEC_TIME}@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@max_input_vars.*@max_input_vars=10000@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@memory_limit.*@memory_limit=${PHP_MEM_LIMIT}@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@max_input_vars.*@max_input_vars=10000@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@post_max_size.*@post_max_size=16M@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@upload_max_filesize.*@upload_max_filesize=16M@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@session.gc_maxlifetime.*@session.gc_maxlifetime=43200\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@;date.timezone =@date.timezone = ${TIMEZONE}@g\" /etc/php/${PHP_VERSION}/apache2/php.ini; \
        sed -i \"s@short_open_tag.*@short_open_tag=On@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@max_execution_time.*@max_execution_time=${PHP_MAX_EXEC_TIME}@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@max_input_vars.*@max_input_vars=10000@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@memory_limit.*@memory_limit=${PHP_MEM_LIMIT}@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@post_max_size.*@post_max_size=16M@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@upload_max_filesize.*@upload_max_filesize=16M@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        sed -i \"s@;date.timezone =@date.timezone = ${TIMEZONE}@g\" /etc/php/${PHP_VERSION}/cli/php.ini; \
        "

	# sodium
	_php_sodium="php${PHP_VERSION}-sodium\
        "

	# postfix config
	_postfix_config="echo \"postfix postfix/mailname string ${SITE_NAME}\" | debconf-set-selections; \
        echo \"postfix postfix/main_mailer_type string 'Internet Site'\" | debconf-set-selections; \
        apt-get install --assume-yes -y mailutils; \
        sed -i \"s@myhostname =.*@myhostname = ${HOSTNAME}@g\" /etc/postfix/main.cf; \
        printf \"smtpd_use_tls = no\nvirtual_maps = regexp:/etc/postfix/virtual-regexp\nmaillog_file=/var/log/apache2/mail.log\" >> /etc/postfix/main.cf; \
        printf \"/.+@.+/ root\" > /etc/postfix/virtual-regexp; \
        "

	_xdebug_config="printf \"xdebug.mode=develop,debug\nxdebug.start_with_request=yes\nxdebug.scream=${XDEBUG_SCREAM}\nxdebug.var_display_max_data=${XDEBUG_DISPLAY_MAX_DATA}\nxdebug.var_display_max_depth=${XDEBUG_DISPLAY_MAX_DEPTH}\nxdebug.var_display_max_children=${XDEBUG_DISPLAY_MAX_CHILDREN}\nxdebug.cli_color=1\nxdebug.log='/var/log/apache2/xdebug.log'\nxdebug.force_display_errors=${XDEBUG_FORCE_DISPLAY_ERRORS}\" >> /etc/php/${PHP_VERSION}/apache2/conf.d/20-xdebug.ini; \
        "

	# build the image in docker style
	message "Building a custom iamge form ${SITE_NAME} ..."
	_file="${SITE_HOME}/.container/Dockerfile.${SITE_NAME}"
	echo "FROM ${IMAGE}" >$_file
	echo "LABEL maintainer='bridgesense llc'" >>$_file
	echo "LABEL description='Provides a full LAMP stack, xdebug and mail shield for PHP development.'" >>$_file
	echo "LABEL io.k8s.display-name='An Ubuntu LTS full LAMP stack'" >>$_file

	# Disable IPv6
	echo "RUN echo 'precedence ::ffff:0:0/96 100' >> /etc/gai.conf" >>$_file
	echo "RUN echo 'Acquire::ForceIPv4 \"true\";' > /etc/apt/apt.conf.d/99force-ipv4" >>$_file

	echo "RUN apt-get update -y --fix-missing" >>$_file
	# included epel for mcrypt and imagick libraries
	echo "RUN apt-get install -y ${_tools}" >>$_file
	echo "RUN LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php" >>$_file
	echo "RUN apt-get update -y" >>$_file
	echo "RUN apt-get dist-upgrade -y" >>$_file
	echo "RUN apt-get install -y ${_apache} ${_mariadb} ${_php}" >>$_file
	echo "RUN ${_openssl}" >>$_file
	echo "RUN ${_apache_config} ${_mariadb_config} ${_php_config} ${_xdebug_config} ${_postfix_config}" >>$_file
	echo "RUN ${_elasticsearch}" >>$_file
	sodium_ver=("7.0" "7.1")
	if [[ " ${sodium_ver[*]} " =~ " ${PHP_VERSION} " ]]; then
		echo "RUN apt-get install -y ${_php_sodium}" >>$_file
	fi
	if [ $USE_EXTRAS -eq 1 ]; then
		echo "RUN apt-get install -y ${_modules}" >>$_file
		echo "RUN ${_npm_globals}" >>$_file
		echo "RUN ${_composer}" >>$_file
	fi

	# apache override
	echo "RUN wget http://github.com/bridgesense/lampready/raw/master/apache2-bin_2.4.41-4ubuntu3.13_amd64.deb -O /usr/local/share/apache2-override.deb" >>$_file
	echo "RUN sleep 2" >>$_file
	echo "RUN dpkg -i /usr/local/share/apache2-override.deb" >>$_file

	# set server time
	echo "RUN ln -fs /usr/share/zoneinfo/${TIMEZONE} /etc/localtime" >>$_file
	echo "RUN dpkg-reconfigure -f noninteractive tzdata" >>$_file

	podman build -t "${SITE_NAME}:private" -f $_file
}

# cleans the container directory
function clean_container_directory {
	message "Cleaning the container directory: ${SITE_HOME}/.container ..."

	rm -rf "${SITE_HOME}/.container/mariadb"
	rm -rf "${SITE_HOME}/.container/log"
	rm -f "${SITE_HOME}/.container/Dockerfile.${SITE_NAME}"
	rm -f "${SITE_HOME}/.container/init.lock"
}

# cleans up the LAMP container
function clean_lamp_container {
	get_state

	if [ $STATE -eq 0 ]; then
		message "stoping LAMP service..."
		systemctl --user stop "container-${SITE_NAME}" >/dev/null 2>&1
	fi

	if [ $STATE -lt 2 ]; then
		message "stoping container..."
		podman stop $SITE_NAME >/dev/null 2>&1
	fi

	if [ $STATE -lt 3 ]; then
		message "removing container..."
		podman rm $SITE_NAME >/dev/null 2>&1
	fi

	if [ $STATE -lt 4 ]; then
		message "removing image..."
		podman rmi "${SITE_NAME}:private" >/dev/null 2>&1
	fi

	if [ $STATE -gt 3 ]; then
		message "no containers found"
	fi

	if [ -f "${HOME}/.config/systemd/user/container-${SITE_NAME}.service" ]; then
		rm -rf "${HOME}/.config/systemd/user/container-${SITE_NAME}.service"
		systemctl --user daemon-reload
		sleep 2
	fi
}

# a mini-man
function display_help {
	echo ""
	echo "Available commands"
	echo "--------------------------------------------------"
	echo "bash box help        displays available commands"
	echo "bash box up          downloads, builds and starts container"
	echo "bash box halt        stops container"
	echo "bash box import      imports database files"
	echo "bash box export      exports database files"
	echo "bash box destroy     halts and destroys all files affiliated with container"
	echo "bash box list        lists all installed images"
	echo "bash box mail        view mail in mail trap"
	echo "bash box mysql       enter mysql prompt"
	echo "bash box ps          list running containers"
	echo "bash box reset       the emergency panic button - see notes below"
	echo "bash box ssh         enter the container commandline"
	echo ""
	echo "NOTE ABOUT ROOTLESS CONTAINERS:"
	echo "A feature of the rootless container is the ability to utilize the host"
	echo "system's environment.  This provides an incredible boost in system"
	echo "performance over a traditional VM.  Any limitations discovered in the"
	echo "container are limitations of the host system."
	echo ""
	echo "As an example, if you want to use any of the privileged ports below 1024,"
	echo "you will need to run the following commands on the host system prior to"
	echo "running this script:"
	echo ""
	echo "echo 'net.ipv4.ip_unprivileged_port_start=0' > /etc/sysctl.d/05-expose-privileged.conf"
	echo "sysctl --system"
	echo ""
	echo "In short, any adjusts to kernel runtime parameters are adjustments"
	echo "that need performed on the host system."
	echo ""
	echo "EXPANDING INOTIFY WATCH LIMIT"
	echo "In another example, popular tools like Angular or Gulp can reload and"
	echo "compile code on the fly.  These processes might fail for no reason at all. Increasing the"
	echo "inotify max_user_watches value might help certain situations for larger projects."
	echo ""
	echo "echo 'fs.inotify.max_user_watches=524288' > /etc/sysctl.d/10-increase-inotify-watch-limit.conf"
	echo "sysctl --system"
	echo ""
	echo "ADDING ADDITIONAL HOSTNAMES:"
	echo "To override remote DNS routing any local hostnames need to be defined in the host"
	echo "system's /etc/hosts file manually:"
	echo ""
	echo "echo \"127.0.0.1   dev.lampready.com localhost\" >> /etc/hosts"
	echo ""
	echo "INCLUDING ADDITIONAL APACHE SITE CONFIGURATION FILES:"
	echo "This script is designed to work with the single hostname entered at the"
	echo "top of this file.  Additional site configuration files may be copied to the"
	echo "following directory:"
	echo ""
	echo "mkdir -p .container/sites-enabled"
	echo "cp my_site_config.conf .container/sites-enabled"
	echo ""
	echo "ACCESSING LOG FILES:"
	echo "Log files may be accessed in the following directory after the script"
	echo "has been launched:"
	echo ""
	echo "ls -l .container/logs"
	echo ""
	echo "NOTE ABOUT DESTROYING CONTAINERS:"
	echo "The destroy command will not delete some shared content. The following directories"
	echo "will not be affected:"
	echo ""
	echo "${SITE_HOME}/.container/sites-enabled"
	echo "${SITE_HOME}/${PUBLIC_ROOT_PATH}"
	echo ""
	echo "WHY DO I USE THE RESET OPTION FOR?"
	echo "Don't confuse the reset option with the destroy command.  Destroy wipes a project clean."
	echo "Reset wipes out everything you've done with podman. It essentially destroys all projects"
	echo "including the master image, so be careful with it. You might have other projects that are"
	echo "not related to this script that will also be removed."
	echo ""
	echo "From time to time, a reoccurring error appears during the build phase, 'error copying"
	echo "layers and metadata for container'.  This error is not based on any dangling processes"
	echo "or bad images. The reset option is just a quick way around the issue, allowing you to"
	echo "move forward quickly in setting up a new project -- at the cost of trashing any existing"
	echo "projects that are working.  In most cases, this script doesn't take long spinning up new"
	echo "images.  A quick reset is not that much of a disadvantage when considering time and"
	echo "deadlines."
	echo ""
	echo "CREDITS:"
	echo "This script was based on Scott McCarty's contribution to this subject,"
	echo "A Hacker's Guide to Moving LInux Services Into Containers:"
	echo ""
	echo "https://crunchtools.com/moving-linux-services-to-containers"
	echo ""
}

function export_databases {
	# import database
	for ((i = 1; i < 50; i++)); do
		if set | grep "^DB$i" >/dev/null 2>&1; then
			declare -n var="DB$i"
			if [ "${var[DB_NAME]}" != "" ]; then
				mysqldump -u root --single-transaction --quick --lock-tables=false --skip-tz-utc ${var[DB_NAME]} | gzip -9 >"/var/www/${var[DB_NAME]}.sql.gz"
			fi
		fi
	done
}

# import databases
function import_databases {
	# import database
	for ((i = 1; i < 50; i++)); do
		if set | grep "^DB$i" >/dev/null 2>&1; then
			declare -n var="DB$i"
			if [ "${var[DB_NAME]}" != "" ] && [ "${var[DB_USER]}" != "" ]; then
				# creating database
				mysql -e "CREATE DATABASE ${var[DB_NAME]}" >/dev/null 2>&1

				# creating user
				mysql -e "CREATE USER '${var[DB_USER]}'@'localhost' IDENTIFIED BY '$(echo ${var[DB_PASS]})';" >/dev/null 2>&1

				# granting permissions
				mysql -e "GRANT ${var[DB_PERM]} ON ${var[DB_NAME]}.* TO '${var[DB_USER]}'@'localhost'"

				# importing database file if exists
				if [ "${var[DB_FILENAME]}" != "" ] && [ -f "/var/www/${var[DB_FILENAME]}" ]; then
					mysql -f ${var[DB_NAME]} </var/www/${var[DB_FILENAME]}

					# importing functions if exists
					if [ "${var[DB_CUSTOM_FUNCTIONS_FILENAME]}" != "" ] && [ -f "/var/www/${var[DB_CUSTOM_FUNCTIONS_FILENAME]}" ]; then
						mysql -f ${var[DB_NAME]} </var/www/${var[DB_CUSTOM_FUNCTIONS_FILENAME]}
					fi

					# modifications for development site name designation
					if [ "${var[DB_TYPE]}" == "wordpress" ]; then
						WPQ1=$(mysql -N -e "use ${var[DB_NAME]}; SELECT option_value FROM ${var[DB_PREFIX]}options WHERE option_name = 'siteurl'")
						WPA1=$(sed -E "s@(:\/\/([a-zA-Z0-9\-]*\.)?([a-zA-Z0-9\-]*)\.([a-zA-Z0-9\-]*))(\.[a-zA-Z0-9\-]*)?\/?@://${SITE_NAME}@" <<<$WPQ1)
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}options SET option_value = '${WPA1}' WHERE option_name = 'siteurl' OR option_name = 'home'"
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}posts SET guid = replace(guid, '${WPQ1}','${WPA1}')"
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}posts SET post_content = replace(post_content, '${WPQ1}', '${WPA1}')"
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}postmeta SET meta_value = replace(meta_value,'${WPQ1}','${WPA1}')"
					fi
					if [ "${var[DB_TYPE]}" == "magento_1" ]; then
						echo "Setting up Magento..."
						MGQ1=$(mysql -N -e "use ${var[DB_NAME]}; SELECT value FROM ${var[DB_PREFIX]}core_config_data WHERE scope = 'default' AND path = 'web/unsecure/base_url'")
						MGA1=$(sed -E "s@(:\/\/([a-zA-Z0-9\-]*\.)?([a-zA-Z0-9\-]*)\.([a-zA-Z0-9\-]*))(\.[a-zA-Z0-9\-]*)?\/?@://${SITE_NAME}/@" <<<$MGQ1)
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}core_config_data SET value = '$MGA1' WHERE path = 'web/unsecure/base_url'"
						MGQ2=$(mysql -N -e "use ${var[DB_NAME]}; SELECT value FROM ${var[DB_PREFIX]}core_config_data WHERE scope = 'default' AND path = 'web/secure/base_url'")
						MGA2=$(sed -E "s@(:\/\/([a-zA-Z0-9\-]*\.)?([a-zA-Z0-9\-]*)\.([a-zA-Z0-9\-]*))(\.[a-zA-Z0-9\-]*)?\/?@://${SITE_NAME}/@" <<<$MGQ2)
						mysql -e "USE ${var[DB_NAME]}; UPDATE ${var[DB_PREFIX]}core_config_data SET value = '$MGA2' WHERE path = 'web/secure/base_url'"
						mysql -e "USE ${var[DB_NAME]}; TRUNCATE ${var[DB_PREFIX]}core_cache"
						mysql -e "USE ${var[DB_NAME]}; TRUNCATE ${var[DB_PREFIX]}core_cache_tag"
						mysql -e "USE ${var[DB_NAME]}; TRUNCATE ${var[DB_PREFIX]}core_session"
						cd "/var/www/${PUBLIC_ROOT_PATH}"
						php -f shell/compiler.php -- disable
						php -f shell/indexer.php reindexall
					fi
					if [ "${var[DB_TYPE]}" == "magento_2" ]; then
						cd "/var/www/${PUBLIC_ROOT_PATH}"
						php bin/magento setup:store-config:set --base-url="http://${SITE_NAME}/"
						php bin/magento setup:store-config:set --base-url-secure="https://${SITE_NAME}/"
						php bin/magento setup:static-content:deploy -f
						php bin/magento cache:flush
						php bin/magento indexer:reindex
					fi

				fi
			fi
		else
			break
		fi

		mysql -e "FLUSH PRIVILEGES"
	done
}

# get current state of container
function get_state {
	# 6 = failed validation of minimum requirements for the script
	# 5 = box is already running
	# 4 = ready to build file structure
	# 3 = ready to build image
	# 2 = ready to set up LAMP service
	# 1 = ready to run LAMP service
	# 0 = Lamp Service is Running

	STATE=6
	if [ -x "$(command -v podman)" ]; then
		STATE=5
		if ! podman container list | grep -q "localhost" || podman container list | grep -q "${SITE_NAME}" || [ $MULTI_BOX -eq 1 ]; then
			STATE=4
			if [ -d "${SITE_HOME}/.container/log" ]; then
				STATE=3
				if podman images | grep -q "$SITE_NAME"; then
					STATE=2
					# if podman ps | grep -q $SITE_NAME && [ -f "${HOME}/.config/systemd/user/container-${SITE_NAME}.service" ]; then
					if [ -f "${HOME}/.config/systemd/user/container-${SITE_NAME}.service" ]; then
						STATE=1
						if podman ps | grep -q "$SITE_NAME"; then
							STATE=0
						fi
					fi
				fi
			fi
		fi
	fi
}

# display messages
function message {
	echo ""
	echo "${1}"
}

# warn there is no box running
function no_box_running_message {
	message "The box must be running first!"
	message "Run 'bash box up' to start it"
}

# setup local systemd service
function setup_systemd_service {
	message "Setting up systemd service..."

	# create directory if it doesn't exist
	mkdir -p "${HOME}/.config/systemd/user"

	# stop any rogue processes
	podman stop $SITE_NAME >/dev/null 2>&1

	# clean up rogue data
	podman rm $SITE_NAME >/dev/null 2>&1

	# remove the current container file if exists
	rm -rf "${HOME}/.config/systemd/user/container-${SITE_NAME}.service"

	# container run state parameters
	RUN_PARAMS=()
	if [ "${XDEBUG_ENABLE}" == "1" ]; then
		RUN_PARAMS+=(--network host)
	fi
	if [ $USE_TMPFS -eq 1 ]; then
		RUN_PARAMS+=(
			--tmpfs /etc
			--tmpfs /usr/lib/systemd/system
			--tmpfs /var/lib
			--tmpfs /run/lock
			--tmpfs /run
			--tmpfs /tmp
		)
	fi
	RUN_PARAMS+=(
		-p $HTTP_PORT:80
		-p $SSL_PORT:443
		-p $XDEBUG_PORT:9003
		--hostname $HOSTNAME
		--name $SITE_NAME
		-v "${SITE_HOME}:/var/www:Z"
		-v "${SITE_HOME}/.container/sites-enabled:/etc/apache2/sites-enabled:Z"
		-v "${SITE_HOME}/.container/log:/var/log/apache2:Z"
		-v "${SITE_HOME}/.container/mariadb:/var/lib/mysql:Z"
		--systemd=true
		-v "/sys/fs/cgroup:/sys/fs/cgroup:ro localhost/${SITE_NAME}:private"
	)

	# start the service with everything in place
	podman run -d ${RUN_PARAMS[@]}

	# copy it to a service
	podman generate systemd --name $SITE_NAME --new >"$HOME/.config/systemd/user/container-${SITE_NAME}.service"
}

# start local systemd service
function start_systemd_service {
	message "Starting..."
	systemctl --user daemon-reload
	sleep 2
	systemctl --user start "container-${SITE_NAME}"
	# wake maria
	sleep 5
	podman exec "${SITE_NAME}" chown root:root /var/lib/mysql
	podman exec "${SITE_NAME}" service postfix start
	podman exec "${SITE_NAME}" service memcached start
	podman exec "${SITE_NAME}" service elasticsearch start
	podman exec "${SITE_NAME}" service mariadb start
	if [ $USE_TMPFS -ne 1 ]; then
		# the apache2 patch must be applied on each iteration
		# as a work around for older combinations of systemd and podman
		podman exec "${SITE_NAME}" dpkg -i /usr/local/share/apache2-override.deb
	fi
	podman exec "${SITE_NAME}" ln -s /var/lib/mysql/mysql.sock /var/run/mysqld/mysqld.sock
	podman exec "${SITE_NAME}" service apache2 start
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # routing
if [ "$ACTION" == "help" ]; then
	display_help | less
	exit
fi

# Download, build and start your LAMP with one commandline
if [ "$ACTION" == "up" ]; then

	# what is the current script state
	get_state

	# handle validation warning
	if [ $STATE -eq 6 ]; then
		echo ""
		echo "This script is designed to be used with a Linux system built on systemd"
		echo "Please make sure that the following packages are installed:"
		echo ""
		echo "For Debian-based Systems"
		echo "sudo apt install podman buildah catatonit"
		echo ""
		echo "For Red Hat Systems"
		echo "sudo dnf module install -y container-tools:3.0"
		echo ""
	fi

	# already running?
	if [ $STATE -eq 5 ]; then
		echo ""
		echo "WARNING! Another instance of this script may already be running."
		echo ""
		podman container list
		echo ""
		echo ""
		while true; do
			read -p "Do you wish to proceed? (y/n): " yn
			case $yn in
			[Yy]*)
				MULTI_BOX=1
				break
				;;
			[Nn]*) break ;;
			*) echo "Please answer y or n." ;;
			esac
		done
		get_state
	fi

	# builds the container directory
	if [ $STATE -eq 4 ]; then
		build_container_directory
		# refresh state
		get_state
	fi

	# build the image
	if [ $STATE -eq 3 ]; then
		build_image
		# refresh state
		get_state
	fi

	if [ $STATE -eq 2 ]; then
		# refresh state
		setup_systemd_service
		get_state
	fi

	# ready to launch LAMP server
	if [ $STATE -eq 1 ]; then
		start_systemd_service
		get_state
	fi

	# check if lamp has been initialized
	if [ $STATE -eq 0 ] && [ ! -f "${SITE_HOME}/.container/init.lock" ]; then
		message "Installing LAMP configuration..."
		podman exec "${SITE_NAME}" bash /var/www/box init
		_status=false
		_timeout=0
		while $_status -eq false && [ $_timeout -lt 5 ]; do
			if [ -f "/var/www/.container/init.lock" ]; then
				_status=true
			fi
			sleep 2
			let "_timeout+=1"
		done

		message "Resetting service..."
		systemctl --user daemon-reload
		sleep 2
		systemctl --user restart "container-${SITE_NAME}.service" >/dev/null 2>&1

		# give plenty of time for Maria to waken
		sleep 5
		podman exec "${SITE_NAME}" chown root:root /var/lib/mysql
		podman exec "${SITE_NAME}" mysql_install_db --user=root --basedir=/usr --datadir=/var/lib/mysql
		podman exec "${SITE_NAME}" service postfix start
		podman exec "${SITE_NAME}" service memcached start
		podman exec "${SITE_NAME}" service elasticsearch start
		podman exec "${SITE_NAME}" service mariadb start
		podman exec "${SITE_NAME}" mysql_tzinfo_to_sql /usr/share/zoneinfo
		if [ $USE_TMPFS -ne 1 ]; then
			# the apache2 patch must be applied on each iteration
			# as a work around for older combinations of systemd and podman
			podman exec "${SITE_NAME}" dpkg -i /usr/local/share/apache2-override.deb
		fi

		podman exec "${SITE_NAME}" ln -s /var/lib/mysql/mysql.sock /var/run/mysqld/mysqld.sock
		podman exec "${SITE_NAME}" service apache2 start
		sleep 5

		echo ""
		echo "Setting up the databases based on the information"
		echo "that was entered at the head of this file..."
		echo ""
		podman exec "${SITE_NAME}" bash /var/www/box import_db
	fi

	# ready to launch LAMP server
	if [ $STATE -eq 0 ]; then
		SITE_ACCESS="HTTPS://${SITE_NAME}"
		if [ "HTTP_PORT" != "443" ]; then SITE_ACCESS="${SITE_ACCESS}:${SSL_PORT}"; fi
		echo ""
		echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		echo "+                                                                 +"
		echo "+  Your LAMP is ready...                                          +"
		echo "+                                                                 +"
		echo "+  Please add the following line to your hosts file:              +"
		echo "+  127.0.0.1   ${SITE_NAME}"
		echo "+                                                                 +"
		echo "+  Xdebug has been set up on port: ${XDEBUG_PORT}"
		echo "+  Memcached on: 11211                                            +"
		echo "+                                                                 +"
		echo "+  For Xdebug to work, make sure to open the port (example):      +"
		echo "+  firewall-cmd --permanent --zone=webserver --add-port=${XDEBUG_PORT}/tcp"
		echo "+  semanage port -a -t http_port_t -p tcp ${XDEBUG_PORT}"
		echo "+                                                                 +"
		echo "+  All outbound mail is trapped and can be viewed with:           +"
		echo "+  bash box mail                                                  +"
		echo "+                                                                 +"
		echo "+  See LAMPready.com for more information.                        +"
		echo "+                                                                 +"
		echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
		echo ""
		echo "" && exit >/dev/null 2>&1
	fi
	exit
fi

# Halts the container, stopping all processes associated
# with it.
if [ "$ACTION" == "halt" ]; then
	get_state

	if [ $STATE -eq 0 ]; then
		message "Stopping the container-${SITE_NAME}.service..."
		systemctl --user stop "container-${SITE_NAME}.service"
		podman stop "${SITE_NAME}" >/dev/null 2>&1
		message "${SITE_NAME} has been halted!"
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# Halts and destroys any files created by this container.
if [ "$ACTION" == "destroy" ]; then
	get_state
	clean_lamp_container
	clean_container_directory
	message "Destroy request complete!"
	echo "" && exit >/dev/null 2>&1
fi

# View Email Trap
if [ "$ACTION" == "export" ]; then
	get_state

	if [ $STATE -eq 0 ]; then
		message "Exporting databases"
		message "Depending on the size of the database(s), this could take some time..."
		podman exec "${SITE_NAME}" bash /var/www/box export_db
		message "Export complete.  Check for *.gz files in ${SITE_HOME}"
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# View Email Trap
if [ "$ACTION" == "import" ]; then
	get_state
	if [ $STATE -eq 0 ]; then
		message "Depending on the size of the database(s), this could take some time..."
		podman exec "${SITE_NAME}" bash /var/www/box import_db
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# List current images
if [ "$ACTION" == "list" ]; then
	podman images
	exit
fi

# View Email Trap
if [ "$ACTION" == "mail" ]; then
	get_state

	if [ $STATE -eq 0 ]; then
		podman exec -it "${SITE_NAME}" bash /var/www/box mutt
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# Enter Mysql Prompt
if [ "$ACTION" == "mysql" ]; then
	get_state

	if [ $STATE -eq 0 ]; then
		podman exec -it "${SITE_NAME}" /usr/bin/mysql
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# Enter Mysql Prompt
if [ "$ACTION" == "ps" ]; then
	podman container list
	exit
fi

# emergency reset
if [ $ACTION == "reset" ]; then
	podman images 2>/dev/null
	echo ""
	echo "WARNING! This will destroy all images listed above and their associated containers."
	accept_reset=false
	while true; do
		read -p "Do you wish to continue? (y/n): " yn
		case $yn in
		[Yy]*)
			accept_reset=true
			break
			;;
		[Nn]*) break ;;
		*) echo "Please answer y or n." ;;
		esac
	done

	if $accept_reset -eq true; then
		get_state
		clean_lamp_container
		clean_container_directory
		podman system prune --all --force
		podman rmi --all --force
		echo ""
		echo "You may need to manually clean any other deployments of this script"
		echo "with 'bash box destory', or manually remove the .container directory."
		echo ""
		message "Everything has been reset"
	else
		message "nothing happened"
	fi
	echo "" && exit >/dev/null 2>&1
fi

# Enter lamp shell
if [ "$ACTION" == "ssh" ]; then
	get_state

	if [ $STATE -eq 0 ]; then
		podman exec -it "${SITE_NAME}" /bin/bash -c "source /root/.bashrc"
		podman exec -it "${SITE_NAME}" env HOME=/root /bin/bash -l
		echo "" && exit >/dev/null 2>&1
	else
		no_box_running_message
	fi
	exit
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is reserved for box deployment from within the
# container environment.

# export db
if [ "$ACTION" == "export_db" ]; then
	export_databases
	message "Export complete"
	exit
fi

# imports database files
if [ "$ACTION" == "import_db" ]; then
	import_databases
	message "Import complete"
	exit
fi

# builds default httpd files
if [ "$ACTION" == "init" ]; then
	build_default_httpd_conf
	touch "/var/www/.container/init.lock"
	exit
fi

# run mutt without terminal conflicts
if [ "$ACTION" == "mutt" ]; then
	$(which mutt)
fi

message "'bash box ${ACTION}' is not valid."
message "Use 'bash box help' for available commands."
